// add empty page object for when this snippet is compiled by webpack
- if (!page) page = {}
.content-section
    hr
    //- Future iterations may use (contenteditable="true") instead of form fields
    if (page.content && page.content[i]._id)
        //- p: a(href=`/delete/content/${page.content[i]._id}`) Delete from DB
        button(type="button" class="removeSectionBtn" data-id=page.content[i]._id) &times;
        //- button(type="button" class="removeSectionBtn" onClick=`() => removeContentSection(${page.content[i]._id})`) &times;
    else
        button(type="button" onClick="this.parentElement.remove()") &times;
    p: strong New Section
    input(type="hidden" name="_id" value=page.content && page.content[i]._id)
    label(for="title") Title for content section
        span.--required (req)
    input(type="text" name='title' placeholder="Untitled section" value=page.content && page.content[i].title required) 
    label(for="index") index
    p This will be used to order the content sections on the page
    p #[<strong>Indexes must be unique. </strong>]If no index is provided the sections will be arranged in order of their creation
    input(type="number" name='index' placeholder="0" value=page.content && page.content[i].index) 
    label(for="css_selector") CSS selector that associated with content
    input(type="text" name='css_selector' placeholder="#id" value=page.content && page.content[i].css_selector)
    label(for="type") What type of content will this section manage?
    - const existingSelected = page.content && page.content[i].type
    select(required name="type")
        option(disabled selected=!existingSelected value="") Choose content type
        option(value="heading" selected=(existingSelected==="heading")) Heading
        option(value="text" selected=(existingSelected==="text")) Text
        option(value="image" selected=(existingSelected==="image")) Image
    fieldset
        legend Rules
        p Seamus currently does no policing of any content rules. Rules are displayed as a guideline for users to adhere to.
        label(for="rule") Rules
        textarea(name='rule')= page.content && page.content[i].rules.rule
        label(for="max_value") Max value
        input(type="number" name='max_value' value=page.content && page.content[i].rules.max_value)
        label(for="min_value") Min value
        input(type="number" name='min_value' value=page.content && page.content[i].rules.min_value) 
        label(for="max_unit") Unit for max value
        input(type="text" name='max_unit' value=page.content && page.content[i].rules.max_unit) 
        label(for="min_unit") Unit for min value
        input(type="text" name='min_unit' value=page.content && page.content[i].rules.min_unit) 
        label(for="max_apply_to") Max value applies to (e.g. height)
        input(type="text" name='max_apply_to' value=page.content && page.content[i].rules.max_apply_to) 
        label(for="min_apply_to") Min value applies to (e.g. height)
        input(type="text" name='min_apply_to' value=page.content && page.content[i].rules.min_apply_to) 

        